@page "/users"
@using BackOffice.Data
@attribute [StreamRendering]
@rendermode InteractiveServer

@inject HttpClient Http

<PageTitle>Users</PageTitle>

<h1>Users</h1>

<AuthorizeView>
    <Authorized>
        @if (users == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var user in users)
            {
                <div class="mb-3">
                    @user.FirstName @user.LastName
                    <button @onclick="() => EditUser(user)">Edit</button>
                    <button @onclick="() => DeleteUser(user.Id)">Delete</button>
                </div>
            }
        }

        @if (editUser != null)
        {
            <EditForm Model="editUser" OnValidSubmit="HandleValidSubmit" Context="editFormContext">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div>
                    <label>First Name:</label>
                    <InputText @bind-Value="editUser.FirstName" />
                </div>
                <div>
                    <label>Last Name:</label>
                    <InputText @bind-Value="editUser.LastName" />
                </div>
                <div>
                    <label>Email:</label>
                    <InputText @bind-Value="editUser.Email" />
                </div>
                <!-- Add other fields as necessary -->

                <button type="submit">Update</button>
                <button type="button" @onclick="CancelEdit">Cancel</button>
            </EditForm>
        }
    </Authorized>
</AuthorizeView>

@code {
    private ApplicationUser[]? users;
    private ApplicationUser? editUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await Http.GetFromJsonAsync<ApplicationUser[]>("https://userprovider-davidob.azurewebsites.net/api/GetUsers?code=VrdeeYq8ErcJMBrbzY4IgBxtZL6NBsb7YMEMAUN3E4g2AzFuZD0Kjw%3D%3D");
    }

    private void EditUser(ApplicationUser user)
    {
        editUser = new ApplicationUser
            {
                Id = user.Id,
                FirstName = user.FirstName,
                LastName = user.LastName,
                Email = user.Email,
                UserName = user.Email,
                // Copy other fields as necessary
            };
    }

    private void CancelEdit()
    {
        editUser = null;
    }

    private async Task HandleValidSubmit()
    {
        if (editUser != null)
        {
            var response = await Http.PutAsJsonAsync($"https://userprovider-davidob.azurewebsites.net/api/users/{editUser.Id}?code=gseaJhWql3Yf2eTxutzVusz7FuGEhJXEXrlLlQFSsjC8AzFu02u3Lg%3D%3D", editUser);
            if (response.IsSuccessStatusCode)
            {
                editUser = null;
                await LoadUsers();
            }
            else
            {
                // Handle error
            }
        }
    }

    private async Task DeleteUser(string userId)
    {
        var response = await Http.DeleteAsync($"https://userprovider-davidob.azurewebsites.net/api/users/{userId}?code=CITlVVnULozgsAeBWcfRAqg4e6EZbxP-rfAP_UCDw4UdAzFu4NgZWg%3D%3D");
        if (response.IsSuccessStatusCode)
        {
            await LoadUsers();
        }
        else
        {
            // Handle error
        }
    }

    public class ApplicationUser
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Biography { get; set; }
        public string ProfileImage { get; set; }
        public string AddressId { get; set; }
        public string Address { get; set; }
        public string Id { get; set; }
        public string UserName { get; set; }
        public string NormalizedUserName { get; set; }
        public string Email { get; set; }
        public string NormalizedEmail { get; set; }
        public bool EmailConfirmed { get; set; }
        public string PasswordHash { get; set; }
        public string SecurityStamp { get; set; }
        public string ConcurrencyStamp { get; set; }
        public string PhoneNumber { get; set; }
        public bool PhoneNumberConfirmed { get; set; }
        public bool TwoFactorEnabled { get; set; }
        public string LockoutEnd { get; set; }
        public bool LockoutEnabled { get; set; }
        public int AccessFailedCount { get; set; }
    }
}
